-- CREATE BOOKING ENTITY
  CREATE TABLE BOOKING   
   (  BOOKING_ID   NUMBER(25,0), 
	  BOOKING_STATUS   VARCHAR2(60)  , 
	  CREATED_START_DATE   TIMESTAMP, 
	  CREATED_END_DATE   TIMESTAMP, 
	  ACTUAL_START_DATE   TIMESTAMP  , 
	  ACTUAL_END_DATE   TIMESTAMP  , 
	  COMMENTS   VARCHAR2(255)  , 
	  USER_ID   NUMBER(10,0),
      LISTING_ID   NUMBER(10,0),
      TRANSACTION_ID   NUMBER(10,0)
   );
   
-- CREATE ADDRESS ENTITY   
   CREATE TABLE ADDRESS   
   (  ADDRESS_ID   NUMBER(25,0), 
	  ADDRESS_LINE_1   VARCHAR2(255)  , 
	  ADDRESS_LINE_2   VARCHAR2(255), 
	  ZIP_CODE   VARCHAR2(40), 
	  CITY_ID   VARCHAR2(255)
   );
   
  ALTER TABLE BOOKING   ADD CONSTRAINT BOOKING_PK   PRIMARY KEY (  BOOKING_ID  );
  ALTER TABLE BOOKING   MODIFY (  BOOKING_STATUS   CONSTRAINT BOOKING_STATUS_NOT_NULL   NOT NULL ENABLE);
  ALTER TABLE BOOKING   MODIFY (  CREATED_START_DATE   CONSTRAINT CREATED_START_DATE_NOT_NULL   NOT NULL ENABLE);
  ALTER TABLE BOOKING   MODIFY (  CREATED_END_DATE   CONSTRAINT CREATED_END_DATE_NOT_NULL   NOT NULL ENABLE);
  ALTER TABLE BOOKING   MODIFY (  ACTUAL_START_DATE   CONSTRAINT ACTUAL_START_DATE_NOT_NULL   NOT NULL ENABLE);
  ALTER TABLE BOOKING   MODIFY (  ACTUAL_END_DATE   CONSTRAINT ACTUAL_END_DATE_NOT_NULL   NOT NULL ENABLE);
  
  -- WILL ADD THESE LATER AFTER CREATION OF 
  ALTER TABLE BOOKING   ADD CONSTRAINT USER_ID_FK1   FOREIGN KEY (  USER_ID  )
	  REFERENCES USERS   (  USER_ID  ) ON DELETE CASCADE ENABLE;
  ALTER TABLE BOOKING   ADD CONSTRAINT LISTING_ID_FK2   FOREIGN KEY (  LISTING_ID  )
	  REFERENCES CAR_LISTINGS   (  LISTING_ID  ) ON DELETE CASCADE ENABLE;	
  ALTER TABLE BOOKING   ADD CONSTRAINT TRANSACTION_ID_FK3   FOREIGN KEY (  TRANSACTION_ID  )
	  REFERENCES TRANSACTION   (  TRANSACTION_ID  ) ON DELETE CASCADE ENABLE;
	  
	  
  ALTER TABLE ADDRESS   ADD CONSTRAINT ADDRESS_PK   PRIMARY KEY (  ADDRESS_ID  );
  ALTER TABLE ADDRESS   MODIFY (  ADDRESS_LINE_1   CONSTRAINT ADDRESS_LINE_1_NOT_NULL   NOT NULL ENABLE);
  ALTER TABLE ADDRESS   MODIFY (  ZIP_CODE   CONSTRAINT ZIP_CODE_NOT_NULL   NOT NULL ENABLE);
  ALTER TABLE ADDRESS   MODIFY (  CITY_ID   CONSTRAINT CITY_ID_NOT_NULL   NOT NULL ENABLE);
  
  
  --CREATE PACKAGE
  CREATE OR REPLACE EDITIONABLE PACKAGE PKG_BOOKING   AS 
    
    FUNCTION BODY_BOOKING(
        vBOOKING_ID IN BOOKING.BOOKING_ID%type,
        vBOOKING_STATUS IN BOOKING.BOOKING_STATUS%type,
        vCREATED_START_DATE IN BOOKING.CREATED_START_DATE %type,
        vCREATED_END_DATE IN BOOKING.CREATED_END_DATE%type,
        vACTUAL_START_DATE IN BOOKING.ACTUAL_START_DATE%type,
        vACTUAL_END_DATE IN BOOKING.ACTUAL_END_DATE%type,
        vCOMMENTS IN BOOKING.COMMENTS%type	
    ) RETURN VARCHAR2;
	
	 FUNCTION COMPARE_TIMESTAMP(
        VTIME_ONE IN TIMESTAMP,
        VTIMESTAMP_TWO IN TIMESTAMP
    ) RETURN VARCHAR2;
        
END PKG_BOOKING;


 --CREATE PACKAGE BODY
 CREATE OR REPLACE EDITIONABLE PACKAGE BODY PKG_BOOKING   AS

  FUNCTION BODY_BOOKING(
        vBOOKING_ID IN BOOKING.BOOKING_ID%type,
        vBOOKING_STATUS IN BOOKING.BOOKING_STATUS%type,
        vCREATED_START_DATE IN BOOKING.CREATED_START_DATE %type,
        vCREATED_END_DATE IN BOOKING.CREATED_END_DATE%type,
        vACTUAL_START_DATE IN BOOKING.ACTUAL_START_DATE%type,
        vACTUAL_END_DATE IN BOOKING.ACTUAL_END_DATE%type,
        vCOMMENTS IN BOOKING.COMMENTS%type	
    ) RETURN VARCHAR2 AS

			EXISTING_BOOKING NUMBER;
			INVALID_BOOKING_EX EXCEPTION;
			INVALID_BOOKING_VAL_EX EXCEPTION;
			CREATED_START_DATE_EX EXCEPTION;
			CREATED_END_DATE_EX EXCEPTION;
			ACTUAL_START_DATE_EX EXCEPTION;
			ACTUAL_END_DATE_EX EXCEPTION;
			DUPLICATE_BOOKING_EX EXCEPTION;
			CREATED_START_DATE_LESS_THAN_SYS_EX EXCEPTION;
			CREATED_START_DATE_SMALLER_EX EXCEPTION;
			CREATED_END_DATE_LESS_THAN_SYS_EX EXCEPTION;
			ACTUAL_START_DATE_LESS_THAN_SYS_EX EXCEPTION;
			ACTUAL_START_DATE_SMALLER_EX EXCEPTION;
			ACTUAL_END_DATE_LESS_THAN_SYS_EX EXCEPTION;
			
        
    BEGIN
        
		-- CHECK IF BOOKING STATUS IS BLACK OR NULL
        if vBOOKING_STATUS is NULL or LENGTH(trim(vBOOKING_STATUS)) IS NULL then
            raise INVALID_BOOKING_EX;
        end if;
		
		-- CHECK IF BOOKING STATUS IS VALID
        if NOT UPPER(vBOOKING_STATUS) = 'COMPLETED' OR NOT UPPER(vBOOKING_STATUS) = 'IN-PROGRESS' OR NOT UPPER(vBOOKING_STATUS) = 'OPEN' then
            raise INVALID_BOOKING_VAL_EX;
        end if;
		
		-- CHECK IF CREATED_START_DATE IS BLANK OR NULL
		if vCREATED_START_DATE is NULL or to_char(LENGTH(vCREATED_START_DATE)) is NULL then
            raise CREATED_START_DATE_EX;
        end if;
		
		-- CHECK IF CREATED_END_DATE IS BLANK OR NULL
		if vCREATED_END_DATE is NULL or to_char(LENGTH(vCREATED_END_DATE)) is NULL then
            raise CREATED_END_DATE_EX;
        end if;
		
		-- CHECK IF ACTUAL_START_DATE IS BLANK OR NULL		
		if vACTUAL_START_DATE is NULL or to_char(LENGTH(vACTUAL_START_DATE)) is NULL then
            raise ACTUAL_START_DATE_EX;
        end if;
		
		-- CHECK IF ACTUAL_END_DATE IS BLANK OR NULL	
		if vACTUAL_END_DATE is NULL or to_char(LENGTH(vACTUAL_END_DATE)) is NULL then
            raise ACTUAL_END_DATE_EX;
        end if;
                
		-- CHECK IF CREATED_START_DATE IS GREATER THAN CURRENT_DATE
		if COMPARE_TIMESTAMP(vCREATED_START_DATE, SYSTIMESTAMP ) < 0 then
            raise CREATED_START_DATE_LESS_THAN_SYS_EX;
        end if;
        
		-- CHECK IF CREATED_START_DATE IS LESS THAN CREATED_END_DATE
		if COMPARE_TIMESTAMP(vCREATED_END_DATE, vCREATED_START_DATE ) < 0 then
            raise CREATED_START_DATE_SMALLER_EX;
        end if;
        
		-- CHECK IF CREATED_END_DATE IS GREATER THAN CURRENT_DATE
		if COMPARE_TIMESTAMP(vCREATED_END_DATE, SYSTIMESTAMP ) < 0 then
            raise CREATED_END_DATE_LESS_THAN_SYS_EX;
        end if;
        
		-- CHECK IF ACTUAL_START_DATE IS GREATER THAN CURRENT_DATE
		if COMPARE_TIMESTAMP(vACTUAL_START_DATE, SYSTIMESTAMP ) < 0 then
            raise ACTUAL_START_DATE_LESS_THAN_SYS_EX;
        end if;
        
		-- CHECK IF ACTUAL_START_DATE IS LESS THAN ACTUAL_END_DATE
		if COMPARE_TIMESTAMP(vACTUAL_END_DATE, vACTUAL_START_DATE ) < 0 then
            raise ACTUAL_START_DATE_SMALLER_EX;
        end if;
        
		-- CHECK IF ACTUAL_END_DATE IS GREATER THAN CURRENT_DATE
		if COMPARE_TIMESTAMP(vACTUAL_END_DATE, SYSTIMESTAMP ) < 0 then
            raise ACTUAL_END_DATE_LESS_THAN_SYS_EX;
		end if;
        
        begin
             select BOOKING_ID into EXISTING_BOOKING from BOOKING where BOOKING_ID = vBOOKING_ID;
             if EXISTING_BOOKING is NOT NULL then
                raise DUPLICATE_BOOKING_EX;
            end if;
        exception
            when DUPLICATE_BOOKING_EX then
                raise DUPLICATE_BOOKING_EX;
            when NO_DATA_FOUND then
                return 'YES';
        end;
        
        RETURN 'YES';
    EXCEPTION
        when INVALID_BOOKING_EX then
            dbms_output.put_line('[ERROR] Invalid Booking Type, Booking Type cannot be NULL or Empty');
            RETURN 'NO';
        when INVALID_BOOKING_VAL_EX then
            dbms_output.put_line('[ERROR] Invalid Booking Type, allowed values are ''COMPLETED'', ''IN-PROGRESS'',''OPEN''');
            RETURN 'NO';
        when CREATED_START_DATE_EX then
            dbms_output.put_line('[ERROR] Invalid Created Start Date, Enter a valid Created Start Date');
            RETURN 'NO';
        when CREATED_END_DATE_EX then
            dbms_output.put_line('[ERROR] Invalid Created End Date, Enter a valid Created End Date');
            RETURN 'NO';
        when ACTUAL_START_DATE_EX then
            dbms_output.put_line('[ERROR] Invalid Actual Start Date, Enter a valid Created End Date');
            RETURN 'NO';
        when ACTUAL_END_DATE_EX then
            dbms_output.put_line('[ERROR] Invalid Actual End Date, Enter a valid Created End Date');
            RETURN 'NO';
        when DUPLICATE_BOOKING_EX then
            dbms_output.put_line('[ERROR] Duplicate booking, booking with the same id already exists');
			RETURN 'NO';
        when CREATED_START_DATE_LESS_THAN_SYS_EX then
            dbms_output.put_line('[ERROR] CreatedStartDate cannot be less the current date');
			RETURN 'NO';
        when CREATED_START_DATE_SMALLER_EX then
            dbms_output.put_line('[ERROR] CreatedStartDate cannot be less the CreatedEndDate');
            RETURN 'NO';
        when CREATED_END_DATE_LESS_THAN_SYS_EX then
            dbms_output.put_line('[ERROR] CreatedEndDate cannot be less the current date');
            RETURN 'NO';
        when ACTUAL_START_DATE_LESS_THAN_SYS_EX then
            dbms_output.put_line('[ERROR] ActualStartDate cannot be less the current date');
            RETURN 'NO';
        when ACTUAL_START_DATE_SMALLER_EX then
            dbms_output.put_line('[ERROR] ActualStartDate cannot be less the ActualEndDate');
            RETURN 'NO';
        when ACTUAL_END_DATE_LESS_THAN_SYS_EX then
            dbms_output.put_line('[ERROR] ActualEndDate cannot be less the current date');
            RETURN 'NO';
        when others then
            RETURN 'NO';
  END BODY_BOOKING;
  
 	 FUNCTION COMPARE_TIMESTAMP(
        VTIME_ONE IN TIMESTAMP,
        VTIMESTAMP_TWO IN TIMESTAMP
    ) RETURN VARCHAR2 AS
	
	begin
	  return extract (day    from (VTIME_ONE-VTIMESTAMP_TWO))*24*60*60 +
			 extract (hour   from (VTIME_ONE-VTIMESTAMP_TWO))*60*60+
			 extract (minute from (VTIME_ONE-VTIMESTAMP_TWO))*60+
			 extract (second from (VTIME_ONE-VTIMESTAMP_TWO));
	end COMPARE_TIMESTAMP;

END PKG_BOOKING;