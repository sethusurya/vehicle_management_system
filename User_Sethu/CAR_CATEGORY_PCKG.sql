SET SERVEROUTPUT ON;

CREATE OR REPLACE EDITIONABLE PACKAGE PCKG_CAR_CATEGORY   AS
    FUNCTION PROCESS_CAR_CATEGORY(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type
    ) RETURN VARCHAR2;

    PROCEDURE INSERT_CAR_CATEGORY(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type  
    );
    
    PROCEDURE UPDATE_CAR_CATEGORY(
        vCAR_CATEGORY_ID IN CAR_CATEGORY.CAR_CATEGORY_ID%type,
        newCATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type
    );
    
    PROCEDURE CHECK_AND_RETURN_ID(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type,
        OUT_CATEGORY_ID OUT CAR_CATEGORY.CAR_CATEGORY_ID%type
    );

    PROCEDURE DELETE_CATEGORY_BY_NAME(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type
    );
    
END PCKG_CAR_CATEGORY;
/

CREATE OR REPLACE EDITIONABLE PACKAGE  BODY PCKG_CAR_CATEGORY   AS
    FUNCTION PROCESS_CAR_CATEGORY(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type
    ) RETURN VARCHAR2 AS
    ex_INVALID_NAME EXCEPTION;
    ex_INVALID_CATEGORY EXCEPTION;
    BEGIN
        IF vCAR_CATEGORY_NAME IS NULL OR LENGTH(vCAR_CATEGORY_NAME) < 1 THEN
            RAISE ex_INVALID_NAME;
        END IF;
        IF vCAR_CATEGORY_NAME NOT IN ('SEDAN','SUV','COUPE','WAGON','HATCHBACK','CONVERTIBLE','MINIVAN','PICKUP TRUCK', 'SPORTS CAR') THEN
            RAISE ex_INVALID_CATEGORY;
        END IF;
        RETURN 'YES';
    EXCEPTION
        WHEN ex_INVALID_NAME THEN
            dbms_output.enable(100000);
            dbms_output.put_line('INVALID CAR_CATEGORY_NAME');
            RETURN 'NO';
        WHEN ex_INVALID_CATEGORY THEN
            dbms_output.enable(100000);
            dbms_output.put_line('CAR_CATEGORY_NAME IS NOT IN (SEDAN,SUV,COUPE,WAGON,HATCHBACK,CONVERTIBLE,MINIVAN,PICKUP TRUCK)');
            RETURN 'NO';
    END PROCESS_CAR_CATEGORY;

    PROCEDURE INSERT_CAR_CATEGORY(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type
    ) AS
    vCAR_CATEGORY_ID  CAR_CATEGORY.CAR_CATEGORY_ID%type;
    vCount NUMBER(5) DEFAULT 0;
    ex_INVALID EXCEPTION;
    ex_EXISTS EXCEPTION;
    BEGIN
        BEGIN
            select count(CAR_CATEGORY_ID) INTO vCount from CAR_CATEGORY where CAR_CATEGORY_NAME = UPPER(trim(vCAR_CATEGORY_NAME));
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    vCount := 0;
        END;
        IF vCount > 0 THEN
            raise ex_EXISTS;
        END IF;
        IF PROCESS_CAR_CATEGORY(UPPER(trim(vCAR_CATEGORY_NAME))) = 'NO' THEN
            raise ex_INVALID;
        END IF;
        SELECT 'CAR_CATEGORY_'||CAR_CATEGORY_ID_SEQ.NEXTVAL INTO vCAR_CATEGORY_ID FROM DUAL;
        INSERT INTO CAR_CATEGORY(CAR_CATEGORY_ID, CAR_CATEGORY_NAME)
        VALUES(
            vCAR_CATEGORY_ID,
            UPPER(trim(vCAR_CATEGORY_NAME))
            );
        IF SQL%ROWCOUNT != 1 then
            dbms_output.put_line('SORRY, INVALID ENTRY !!!');
            rollback;
        ELSE
            COMMIT;
            dbms_output.put_line('CAR_CATERGORY ADDED SUCCESSFULLY !!!'); 
        END IF;
    
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('INSERTED DATA IS NOT AS EXPECTED !!!'); 
        when ex_EXISTS then
            dbms_output.put_line('CAR_CATEGORY ALREADY EXISTS!!!');
    END INSERT_CAR_CATEGORY;
    
    PROCEDURE UPDATE_CAR_CATEGORY(
        vCAR_CATEGORY_ID IN CAR_CATEGORY.CAR_CATEGORY_ID%type,
        newCATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type
    ) AS
    vCount NUMBER(5) DEFAULT 0;
    vCount2 NUMBER(5) DEFAULT 0;
    ex_EXISTS EXCEPTION;
    ex_NOT_EXISTS EXCEPTION;
    ex_INVALID EXCEPTION;
    BEGIN
        BEGIN
            select count(CAR_CATEGORY_ID) INTO vCount FROM CAR_CATEGORY WHERE CAR_CATEGORY_ID = vCAR_CATEGORY_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    vCount := 0;
        END;
        IF vCount != 1 THEN
            RAISE ex_NOT_EXISTS;
        END IF;
        BEGIN
            select count(CAR_CATEGORY_ID) INTO vCount2 from CAR_CATEGORY where CAR_CATEGORY_NAME = UPPER(trim(newCATEGORY_NAME));
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    vCount2 := 0;
        END;
        IF vCount2 > 0 THEN
            RAISE ex_EXISTS;
        END IF;
        IF PROCESS_CAR_CATEGORY(UPPER(trim(newCATEGORY_NAME))) = 'NO' THEN
            raise ex_INVALID;
        END IF;
        UPDATE CAR_CATEGORY SET CAR_CATEGORY_NAME = UPPER(trim(newCATEGORY_NAME)) WHERE CAR_CATEGORY_ID = vCAR_CATEGORY_ID;
    EXCEPTION
        WHEN ex_NOT_EXISTS THEN
            dbms_output.put_line('CAR_CATEGORY_ID DOES NOT EXIST!!!!');
        WHEN ex_EXISTS THEN
            dbms_output.put_line('NEW CAR_CATEGORY VALUE ALREADY EXISTS!!!');
        WHEN ex_INVALID THEN
            dbms_output.put_line('NEW CAR_CATEGORY VALUE IS INVLAID!!!');
    END UPDATE_CAR_CATEGORY;
    
    PROCEDURE CHECK_AND_RETURN_ID(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type,
        OUT_CATEGORY_ID OUT CAR_CATEGORY.CAR_CATEGORY_ID%type
    ) AS
    vCount NUMBER(5) DEFAULT 0;
    vCAR_CATEGORY_ID CAR_CATEGORY.CAR_CATEGORY_ID%type;
    BEGIN
        BEGIN
            SELECT count(*) INTO vCount FROM CAR_CATEGORY WHERE CAR_CATEGORY_NAME = UPPER(trim(vCAR_CATEGORY_NAME));
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    vCount := 0;
        END;
        IF vCount != 1 THEN
            BEGIN
                INSERT_CAR_CATEGORY(vCAR_CATEGORY_NAME);
            END;
        END IF;
        SELECT CAR_CATEGORY_ID INTO vCAR_CATEGORY_ID FROM CAR_CATEGORY WHERE CAR_CATEGORY_NAME = UPPER(trim(vCAR_CATEGORY_NAME));
        OUT_CATEGORY_ID := vCAR_CATEGORY_ID;
    END CHECK_AND_RETURN_ID;

    PROCEDURE DELETE_CATEGORY_BY_NAME(
        vCAR_CATEGORY_NAME IN CAR_CATEGORY.CAR_CATEGORY_NAME%type) AS
        vCAR_CATEGORY_ID CAR_CATEGORY.CAR_CATEGORY_ID%type;
        vCAR_CATEGORY_COUNT NUMBER(5);
        vREGISTERED_CAR_COUNT NUMBER(5);
    BEGIN
        BEGIN
            SELECT COUNT(*) INTO vCAR_CATEGORY_COUNT FROM CAR_CATEGORY WHERE UPPER(CAR_CATEGORY_NAME) = UPPER(vCAR_CATEGORY_NAME);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    vCAR_CATEGORY_COUNT := 0;
        END;
        IF vCAR_CATEGORY_COUNT = 0 THEN
            dbms_output.put_line('CAR_CATEGORY NOT FOUND!!!!');
        ELSE
            SELECT CAR_CATEGORY_ID INTO vCAR_CATEGORY_ID FROM CAR_CATEGORY WHERE UPPER(CAR_CATEGORY_NAME) = UPPER(vCAR_CATEGORY_NAME);
            BEGIN
                SELECT COUNT(*) INTO vREGISTERED_CAR_COUNT FROM CAR_REGISTRATION WHERE UPPER(CAR_CATEGORY_ID) = UPPER(vCAR_CATEGORY_ID);
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        vREGISTERED_CAR_COUNT := 0;
            END;

            IF vREGISTERED_CAR_COUNT = 0 THEN
                --TRY DELETE CAR CATEGORY
                DELETE FROM CAR_CATEGORY WHERE CAR_CATEGORY_ID = UPPER(vCAR_CATEGORY_ID);
            ELSE
                dbms_output.put_line('CATEGORY CANNOT BE DELETED, REGISTERED CARS ARE PRESENT!!!');
            END IF;
        END IF;
    END DELETE_CATEGORY_BY_NAME;
END PCKG_CAR_CATEGORY;
/


-- SELECT PCKG_CAR_CATEGORY.PROCESS_CAR_CATEGORY('SUV') FROM DUAL;

-- EXECUTE PCKG_CAR_CATEGORY.INSERT_CAR_CATEGORY('WAGON');

-- select * from CAR_CATEGORY;

-- EXECUTE PCKG_CAR_CATEGORY.UPDATE_CAR_CATEGORY('CAR_CATEGORY_7','COUPE');

/* For CHECING AND GETTING VALUES
-- declare 
--     MYVAL CAR_CATEGORY.CAR_CATEGORY_ID%type;
-- begin
--     PCKG_CAR_CATEGORY.CHECK_AND_RETURN_ID('HATCHBACK', MYVAL);
--     dbms_output.put_line(MYVAL);
-- end;
-- /
*/

-- EXECUTE PCKG_CAR_CATEGORY.DELETE_CATEGORY_BY_NAME('WAGON');